// source: misc/inspector.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.rpad.inspector.ConnectRequest', null, global);
goog.exportSymbol('proto.rpad.inspector.ConnectResponse', null, global);
goog.exportSymbol('proto.rpad.inspector.Element', null, global);
goog.exportSymbol('proto.rpad.inspector.GetElementChildrenRequest', null, global);
goog.exportSymbol('proto.rpad.inspector.GetElementChildrenResponse', null, global);
goog.exportSymbol('proto.rpad.inspector.GetElementTreePathRequest', null, global);
goog.exportSymbol('proto.rpad.inspector.GetElementTreePathResponse', null, global);
goog.exportSymbol('proto.rpad.inspector.GetRootElementResponse', null, global);
goog.exportSymbol('proto.rpad.inspector.InspectRequest', null, global);
goog.exportSymbol('proto.rpad.inspector.InspectResponse', null, global);
goog.exportSymbol('proto.rpad.inspector.Point', null, global);
goog.exportSymbol('proto.rpad.inspector.QuerySelectorRequest', null, global);
goog.exportSymbol('proto.rpad.inspector.QuerySelectorResponse', null, global);
goog.exportSymbol('proto.rpad.inspector.Void', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpad.inspector.Void = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpad.inspector.Void, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpad.inspector.Void.displayName = 'proto.rpad.inspector.Void';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpad.inspector.Point = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpad.inspector.Point, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpad.inspector.Point.displayName = 'proto.rpad.inspector.Point';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpad.inspector.Element = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpad.inspector.Element.repeatedFields_, null);
};
goog.inherits(proto.rpad.inspector.Element, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpad.inspector.Element.displayName = 'proto.rpad.inspector.Element';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpad.inspector.ConnectRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpad.inspector.ConnectRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpad.inspector.ConnectRequest.displayName = 'proto.rpad.inspector.ConnectRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpad.inspector.ConnectResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpad.inspector.ConnectResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpad.inspector.ConnectResponse.displayName = 'proto.rpad.inspector.ConnectResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpad.inspector.InspectRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpad.inspector.InspectRequest.repeatedFields_, null);
};
goog.inherits(proto.rpad.inspector.InspectRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpad.inspector.InspectRequest.displayName = 'proto.rpad.inspector.InspectRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpad.inspector.InspectResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpad.inspector.InspectResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpad.inspector.InspectResponse.displayName = 'proto.rpad.inspector.InspectResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpad.inspector.GetElementChildrenRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpad.inspector.GetElementChildrenRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpad.inspector.GetElementChildrenRequest.displayName = 'proto.rpad.inspector.GetElementChildrenRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpad.inspector.GetElementChildrenResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpad.inspector.GetElementChildrenResponse.repeatedFields_, null);
};
goog.inherits(proto.rpad.inspector.GetElementChildrenResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpad.inspector.GetElementChildrenResponse.displayName = 'proto.rpad.inspector.GetElementChildrenResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpad.inspector.GetRootElementResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpad.inspector.GetRootElementResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpad.inspector.GetRootElementResponse.displayName = 'proto.rpad.inspector.GetRootElementResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpad.inspector.GetElementTreePathRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpad.inspector.GetElementTreePathRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpad.inspector.GetElementTreePathRequest.displayName = 'proto.rpad.inspector.GetElementTreePathRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpad.inspector.GetElementTreePathResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpad.inspector.GetElementTreePathResponse.repeatedFields_, null);
};
goog.inherits(proto.rpad.inspector.GetElementTreePathResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpad.inspector.GetElementTreePathResponse.displayName = 'proto.rpad.inspector.GetElementTreePathResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpad.inspector.QuerySelectorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpad.inspector.QuerySelectorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpad.inspector.QuerySelectorRequest.displayName = 'proto.rpad.inspector.QuerySelectorRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpad.inspector.QuerySelectorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpad.inspector.QuerySelectorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpad.inspector.QuerySelectorResponse.displayName = 'proto.rpad.inspector.QuerySelectorResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpad.inspector.Void.prototype.toObject = function(opt_includeInstance) {
  return proto.rpad.inspector.Void.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpad.inspector.Void} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpad.inspector.Void.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpad.inspector.Void}
 */
proto.rpad.inspector.Void.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpad.inspector.Void;
  return proto.rpad.inspector.Void.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpad.inspector.Void} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpad.inspector.Void}
 */
proto.rpad.inspector.Void.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpad.inspector.Void.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpad.inspector.Void.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpad.inspector.Void} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpad.inspector.Void.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpad.inspector.Point.prototype.toObject = function(opt_includeInstance) {
  return proto.rpad.inspector.Point.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpad.inspector.Point} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpad.inspector.Point.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFieldWithDefault(msg, 1, 0),
    y: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpad.inspector.Point}
 */
proto.rpad.inspector.Point.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpad.inspector.Point;
  return proto.rpad.inspector.Point.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpad.inspector.Point} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpad.inspector.Point}
 */
proto.rpad.inspector.Point.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpad.inspector.Point.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpad.inspector.Point.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpad.inspector.Point} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpad.inspector.Point.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 x = 1;
 * @return {number}
 */
proto.rpad.inspector.Point.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rpad.inspector.Point} returns this
 */
proto.rpad.inspector.Point.prototype.setX = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 y = 2;
 * @return {number}
 */
proto.rpad.inspector.Point.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rpad.inspector.Point} returns this
 */
proto.rpad.inspector.Point.prototype.setY = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpad.inspector.Element.repeatedFields_ = [3,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpad.inspector.Element.prototype.toObject = function(opt_includeInstance) {
  return proto.rpad.inspector.Element.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpad.inspector.Element} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpad.inspector.Element.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    controlType: jspb.Message.getFieldWithDefault(msg, 2, ""),
    boundingRectangleList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    automationId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    className: jspb.Message.getFieldWithDefault(msg, 5, ""),
    frameworkId: jspb.Message.getFieldWithDefault(msg, 6, ""),
    isEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    runtimeIdList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f,
    nativeWindowHandle: jspb.Message.getFieldWithDefault(msg, 9, 0),
    localizedControlType: jspb.Message.getFieldWithDefault(msg, 10, ""),
    handle: jspb.Message.getFieldWithDefault(msg, 15, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpad.inspector.Element}
 */
proto.rpad.inspector.Element.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpad.inspector.Element;
  return proto.rpad.inspector.Element.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpad.inspector.Element} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpad.inspector.Element}
 */
proto.rpad.inspector.Element.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setControlType(value);
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt64() : [reader.readInt64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addBoundingRectangle(values[i]);
      }
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAutomationId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setClassName(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrameworkId(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsEnabled(value);
      break;
    case 8:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addRuntimeId(values[i]);
      }
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setNativeWindowHandle(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocalizedControlType(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setHandle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpad.inspector.Element.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpad.inspector.Element.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpad.inspector.Element} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpad.inspector.Element.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getControlType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBoundingRectangleList();
  if (f.length > 0) {
    writer.writePackedInt64(
      3,
      f
    );
  }
  f = message.getAutomationId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getClassName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getFrameworkId();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getIsEnabled();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getRuntimeIdList();
  if (f.length > 0) {
    writer.writePackedInt32(
      8,
      f
    );
  }
  f = message.getNativeWindowHandle();
  if (f !== 0) {
    writer.writeFixed64(
      9,
      f
    );
  }
  f = message.getLocalizedControlType();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getHandle();
  if (f !== 0) {
    writer.writeFixed64(
      15,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.rpad.inspector.Element.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpad.inspector.Element} returns this
 */
proto.rpad.inspector.Element.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string control_type = 2;
 * @return {string}
 */
proto.rpad.inspector.Element.prototype.getControlType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpad.inspector.Element} returns this
 */
proto.rpad.inspector.Element.prototype.setControlType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated int64 bounding_rectangle = 3;
 * @return {!Array<number>}
 */
proto.rpad.inspector.Element.prototype.getBoundingRectangleList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.rpad.inspector.Element} returns this
 */
proto.rpad.inspector.Element.prototype.setBoundingRectangleList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.rpad.inspector.Element} returns this
 */
proto.rpad.inspector.Element.prototype.addBoundingRectangle = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rpad.inspector.Element} returns this
 */
proto.rpad.inspector.Element.prototype.clearBoundingRectangleList = function() {
  return this.setBoundingRectangleList([]);
};


/**
 * optional string automation_id = 4;
 * @return {string}
 */
proto.rpad.inspector.Element.prototype.getAutomationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpad.inspector.Element} returns this
 */
proto.rpad.inspector.Element.prototype.setAutomationId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string class_name = 5;
 * @return {string}
 */
proto.rpad.inspector.Element.prototype.getClassName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpad.inspector.Element} returns this
 */
proto.rpad.inspector.Element.prototype.setClassName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string framework_id = 6;
 * @return {string}
 */
proto.rpad.inspector.Element.prototype.getFrameworkId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpad.inspector.Element} returns this
 */
proto.rpad.inspector.Element.prototype.setFrameworkId = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional bool is_enabled = 7;
 * @return {boolean}
 */
proto.rpad.inspector.Element.prototype.getIsEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rpad.inspector.Element} returns this
 */
proto.rpad.inspector.Element.prototype.setIsEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * repeated int32 runtime_id = 8;
 * @return {!Array<number>}
 */
proto.rpad.inspector.Element.prototype.getRuntimeIdList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.rpad.inspector.Element} returns this
 */
proto.rpad.inspector.Element.prototype.setRuntimeIdList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.rpad.inspector.Element} returns this
 */
proto.rpad.inspector.Element.prototype.addRuntimeId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rpad.inspector.Element} returns this
 */
proto.rpad.inspector.Element.prototype.clearRuntimeIdList = function() {
  return this.setRuntimeIdList([]);
};


/**
 * optional fixed64 native_window_handle = 9;
 * @return {number}
 */
proto.rpad.inspector.Element.prototype.getNativeWindowHandle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.rpad.inspector.Element} returns this
 */
proto.rpad.inspector.Element.prototype.setNativeWindowHandle = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string localized_control_type = 10;
 * @return {string}
 */
proto.rpad.inspector.Element.prototype.getLocalizedControlType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpad.inspector.Element} returns this
 */
proto.rpad.inspector.Element.prototype.setLocalizedControlType = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional fixed64 handle = 15;
 * @return {number}
 */
proto.rpad.inspector.Element.prototype.getHandle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.rpad.inspector.Element} returns this
 */
proto.rpad.inspector.Element.prototype.setHandle = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpad.inspector.ConnectRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpad.inspector.ConnectRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpad.inspector.ConnectRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpad.inspector.ConnectRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpad.inspector.ConnectRequest}
 */
proto.rpad.inspector.ConnectRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpad.inspector.ConnectRequest;
  return proto.rpad.inspector.ConnectRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpad.inspector.ConnectRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpad.inspector.ConnectRequest}
 */
proto.rpad.inspector.ConnectRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpad.inspector.ConnectRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpad.inspector.ConnectRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpad.inspector.ConnectRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpad.inspector.ConnectRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpad.inspector.ConnectResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rpad.inspector.ConnectResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpad.inspector.ConnectResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpad.inspector.ConnectResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpad.inspector.ConnectResponse}
 */
proto.rpad.inspector.ConnectResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpad.inspector.ConnectResponse;
  return proto.rpad.inspector.ConnectResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpad.inspector.ConnectResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpad.inspector.ConnectResponse}
 */
proto.rpad.inspector.ConnectResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpad.inspector.ConnectResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpad.inspector.ConnectResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpad.inspector.ConnectResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpad.inspector.ConnectResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.rpad.inspector.ConnectResponse.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpad.inspector.ConnectResponse} returns this
 */
proto.rpad.inspector.ConnectResponse.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpad.inspector.InspectRequest.repeatedFields_ = [15];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpad.inspector.InspectRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpad.inspector.InspectRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpad.inspector.InspectRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpad.inspector.InspectRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    point: (f = msg.getPoint()) && proto.rpad.inspector.Point.toObject(includeInstance, f),
    ignoreWindowsList: (f = jspb.Message.getRepeatedField(msg, 15)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpad.inspector.InspectRequest}
 */
proto.rpad.inspector.InspectRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpad.inspector.InspectRequest;
  return proto.rpad.inspector.InspectRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpad.inspector.InspectRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpad.inspector.InspectRequest}
 */
proto.rpad.inspector.InspectRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rpad.inspector.Point;
      reader.readMessage(value,proto.rpad.inspector.Point.deserializeBinaryFromReader);
      msg.setPoint(value);
      break;
    case 15:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFixed64() : [reader.readFixed64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addIgnoreWindows(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpad.inspector.InspectRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpad.inspector.InspectRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpad.inspector.InspectRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpad.inspector.InspectRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPoint();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rpad.inspector.Point.serializeBinaryToWriter
    );
  }
  f = message.getIgnoreWindowsList();
  if (f.length > 0) {
    writer.writePackedFixed64(
      15,
      f
    );
  }
};


/**
 * optional Point point = 1;
 * @return {?proto.rpad.inspector.Point}
 */
proto.rpad.inspector.InspectRequest.prototype.getPoint = function() {
  return /** @type{?proto.rpad.inspector.Point} */ (
    jspb.Message.getWrapperField(this, proto.rpad.inspector.Point, 1));
};


/**
 * @param {?proto.rpad.inspector.Point|undefined} value
 * @return {!proto.rpad.inspector.InspectRequest} returns this
*/
proto.rpad.inspector.InspectRequest.prototype.setPoint = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpad.inspector.InspectRequest} returns this
 */
proto.rpad.inspector.InspectRequest.prototype.clearPoint = function() {
  return this.setPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpad.inspector.InspectRequest.prototype.hasPoint = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated fixed64 ignore_windows = 15;
 * @return {!Array<number>}
 */
proto.rpad.inspector.InspectRequest.prototype.getIgnoreWindowsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 15));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.rpad.inspector.InspectRequest} returns this
 */
proto.rpad.inspector.InspectRequest.prototype.setIgnoreWindowsList = function(value) {
  return jspb.Message.setField(this, 15, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.rpad.inspector.InspectRequest} returns this
 */
proto.rpad.inspector.InspectRequest.prototype.addIgnoreWindows = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 15, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rpad.inspector.InspectRequest} returns this
 */
proto.rpad.inspector.InspectRequest.prototype.clearIgnoreWindowsList = function() {
  return this.setIgnoreWindowsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpad.inspector.InspectResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rpad.inspector.InspectResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpad.inspector.InspectResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpad.inspector.InspectResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    element: (f = msg.getElement()) && proto.rpad.inspector.Element.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpad.inspector.InspectResponse}
 */
proto.rpad.inspector.InspectResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpad.inspector.InspectResponse;
  return proto.rpad.inspector.InspectResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpad.inspector.InspectResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpad.inspector.InspectResponse}
 */
proto.rpad.inspector.InspectResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rpad.inspector.Element;
      reader.readMessage(value,proto.rpad.inspector.Element.deserializeBinaryFromReader);
      msg.setElement(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpad.inspector.InspectResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpad.inspector.InspectResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpad.inspector.InspectResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpad.inspector.InspectResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getElement();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rpad.inspector.Element.serializeBinaryToWriter
    );
  }
};


/**
 * optional Element element = 1;
 * @return {?proto.rpad.inspector.Element}
 */
proto.rpad.inspector.InspectResponse.prototype.getElement = function() {
  return /** @type{?proto.rpad.inspector.Element} */ (
    jspb.Message.getWrapperField(this, proto.rpad.inspector.Element, 1));
};


/**
 * @param {?proto.rpad.inspector.Element|undefined} value
 * @return {!proto.rpad.inspector.InspectResponse} returns this
*/
proto.rpad.inspector.InspectResponse.prototype.setElement = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpad.inspector.InspectResponse} returns this
 */
proto.rpad.inspector.InspectResponse.prototype.clearElement = function() {
  return this.setElement(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpad.inspector.InspectResponse.prototype.hasElement = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpad.inspector.GetElementChildrenRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpad.inspector.GetElementChildrenRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpad.inspector.GetElementChildrenRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpad.inspector.GetElementChildrenRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    handle: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpad.inspector.GetElementChildrenRequest}
 */
proto.rpad.inspector.GetElementChildrenRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpad.inspector.GetElementChildrenRequest;
  return proto.rpad.inspector.GetElementChildrenRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpad.inspector.GetElementChildrenRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpad.inspector.GetElementChildrenRequest}
 */
proto.rpad.inspector.GetElementChildrenRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setHandle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpad.inspector.GetElementChildrenRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpad.inspector.GetElementChildrenRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpad.inspector.GetElementChildrenRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpad.inspector.GetElementChildrenRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHandle();
  if (f !== 0) {
    writer.writeFixed64(
      1,
      f
    );
  }
};


/**
 * optional fixed64 handle = 1;
 * @return {number}
 */
proto.rpad.inspector.GetElementChildrenRequest.prototype.getHandle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rpad.inspector.GetElementChildrenRequest} returns this
 */
proto.rpad.inspector.GetElementChildrenRequest.prototype.setHandle = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpad.inspector.GetElementChildrenResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpad.inspector.GetElementChildrenResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rpad.inspector.GetElementChildrenResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpad.inspector.GetElementChildrenResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpad.inspector.GetElementChildrenResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    elementsList: jspb.Message.toObjectList(msg.getElementsList(),
    proto.rpad.inspector.Element.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpad.inspector.GetElementChildrenResponse}
 */
proto.rpad.inspector.GetElementChildrenResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpad.inspector.GetElementChildrenResponse;
  return proto.rpad.inspector.GetElementChildrenResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpad.inspector.GetElementChildrenResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpad.inspector.GetElementChildrenResponse}
 */
proto.rpad.inspector.GetElementChildrenResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rpad.inspector.Element;
      reader.readMessage(value,proto.rpad.inspector.Element.deserializeBinaryFromReader);
      msg.addElements(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpad.inspector.GetElementChildrenResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpad.inspector.GetElementChildrenResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpad.inspector.GetElementChildrenResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpad.inspector.GetElementChildrenResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getElementsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rpad.inspector.Element.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Element elements = 1;
 * @return {!Array<!proto.rpad.inspector.Element>}
 */
proto.rpad.inspector.GetElementChildrenResponse.prototype.getElementsList = function() {
  return /** @type{!Array<!proto.rpad.inspector.Element>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rpad.inspector.Element, 1));
};


/**
 * @param {!Array<!proto.rpad.inspector.Element>} value
 * @return {!proto.rpad.inspector.GetElementChildrenResponse} returns this
*/
proto.rpad.inspector.GetElementChildrenResponse.prototype.setElementsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rpad.inspector.Element=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rpad.inspector.Element}
 */
proto.rpad.inspector.GetElementChildrenResponse.prototype.addElements = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rpad.inspector.Element, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rpad.inspector.GetElementChildrenResponse} returns this
 */
proto.rpad.inspector.GetElementChildrenResponse.prototype.clearElementsList = function() {
  return this.setElementsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpad.inspector.GetRootElementResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rpad.inspector.GetRootElementResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpad.inspector.GetRootElementResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpad.inspector.GetRootElementResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    element: (f = msg.getElement()) && proto.rpad.inspector.Element.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpad.inspector.GetRootElementResponse}
 */
proto.rpad.inspector.GetRootElementResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpad.inspector.GetRootElementResponse;
  return proto.rpad.inspector.GetRootElementResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpad.inspector.GetRootElementResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpad.inspector.GetRootElementResponse}
 */
proto.rpad.inspector.GetRootElementResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rpad.inspector.Element;
      reader.readMessage(value,proto.rpad.inspector.Element.deserializeBinaryFromReader);
      msg.setElement(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpad.inspector.GetRootElementResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpad.inspector.GetRootElementResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpad.inspector.GetRootElementResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpad.inspector.GetRootElementResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getElement();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rpad.inspector.Element.serializeBinaryToWriter
    );
  }
};


/**
 * optional Element element = 1;
 * @return {?proto.rpad.inspector.Element}
 */
proto.rpad.inspector.GetRootElementResponse.prototype.getElement = function() {
  return /** @type{?proto.rpad.inspector.Element} */ (
    jspb.Message.getWrapperField(this, proto.rpad.inspector.Element, 1));
};


/**
 * @param {?proto.rpad.inspector.Element|undefined} value
 * @return {!proto.rpad.inspector.GetRootElementResponse} returns this
*/
proto.rpad.inspector.GetRootElementResponse.prototype.setElement = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpad.inspector.GetRootElementResponse} returns this
 */
proto.rpad.inspector.GetRootElementResponse.prototype.clearElement = function() {
  return this.setElement(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpad.inspector.GetRootElementResponse.prototype.hasElement = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpad.inspector.GetElementTreePathRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpad.inspector.GetElementTreePathRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpad.inspector.GetElementTreePathRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpad.inspector.GetElementTreePathRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    handle: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpad.inspector.GetElementTreePathRequest}
 */
proto.rpad.inspector.GetElementTreePathRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpad.inspector.GetElementTreePathRequest;
  return proto.rpad.inspector.GetElementTreePathRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpad.inspector.GetElementTreePathRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpad.inspector.GetElementTreePathRequest}
 */
proto.rpad.inspector.GetElementTreePathRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setHandle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpad.inspector.GetElementTreePathRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpad.inspector.GetElementTreePathRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpad.inspector.GetElementTreePathRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpad.inspector.GetElementTreePathRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHandle();
  if (f !== 0) {
    writer.writeFixed64(
      1,
      f
    );
  }
};


/**
 * optional fixed64 handle = 1;
 * @return {number}
 */
proto.rpad.inspector.GetElementTreePathRequest.prototype.getHandle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rpad.inspector.GetElementTreePathRequest} returns this
 */
proto.rpad.inspector.GetElementTreePathRequest.prototype.setHandle = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpad.inspector.GetElementTreePathResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpad.inspector.GetElementTreePathResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rpad.inspector.GetElementTreePathResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpad.inspector.GetElementTreePathResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpad.inspector.GetElementTreePathResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    elementsList: jspb.Message.toObjectList(msg.getElementsList(),
    proto.rpad.inspector.Element.toObject, includeInstance),
    fullProcessImageName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    appUserModelId: jspb.Message.getFieldWithDefault(msg, 15, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpad.inspector.GetElementTreePathResponse}
 */
proto.rpad.inspector.GetElementTreePathResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpad.inspector.GetElementTreePathResponse;
  return proto.rpad.inspector.GetElementTreePathResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpad.inspector.GetElementTreePathResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpad.inspector.GetElementTreePathResponse}
 */
proto.rpad.inspector.GetElementTreePathResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rpad.inspector.Element;
      reader.readMessage(value,proto.rpad.inspector.Element.deserializeBinaryFromReader);
      msg.addElements(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFullProcessImageName(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppUserModelId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpad.inspector.GetElementTreePathResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpad.inspector.GetElementTreePathResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpad.inspector.GetElementTreePathResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpad.inspector.GetElementTreePathResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getElementsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rpad.inspector.Element.serializeBinaryToWriter
    );
  }
  f = message.getFullProcessImageName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAppUserModelId();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
};


/**
 * repeated Element elements = 1;
 * @return {!Array<!proto.rpad.inspector.Element>}
 */
proto.rpad.inspector.GetElementTreePathResponse.prototype.getElementsList = function() {
  return /** @type{!Array<!proto.rpad.inspector.Element>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rpad.inspector.Element, 1));
};


/**
 * @param {!Array<!proto.rpad.inspector.Element>} value
 * @return {!proto.rpad.inspector.GetElementTreePathResponse} returns this
*/
proto.rpad.inspector.GetElementTreePathResponse.prototype.setElementsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rpad.inspector.Element=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rpad.inspector.Element}
 */
proto.rpad.inspector.GetElementTreePathResponse.prototype.addElements = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rpad.inspector.Element, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rpad.inspector.GetElementTreePathResponse} returns this
 */
proto.rpad.inspector.GetElementTreePathResponse.prototype.clearElementsList = function() {
  return this.setElementsList([]);
};


/**
 * optional string full_process_image_name = 2;
 * @return {string}
 */
proto.rpad.inspector.GetElementTreePathResponse.prototype.getFullProcessImageName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpad.inspector.GetElementTreePathResponse} returns this
 */
proto.rpad.inspector.GetElementTreePathResponse.prototype.setFullProcessImageName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string app_user_model_id = 15;
 * @return {string}
 */
proto.rpad.inspector.GetElementTreePathResponse.prototype.getAppUserModelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpad.inspector.GetElementTreePathResponse} returns this
 */
proto.rpad.inspector.GetElementTreePathResponse.prototype.setAppUserModelId = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpad.inspector.QuerySelectorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpad.inspector.QuerySelectorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpad.inspector.QuerySelectorRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpad.inspector.QuerySelectorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    selector: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpad.inspector.QuerySelectorRequest}
 */
proto.rpad.inspector.QuerySelectorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpad.inspector.QuerySelectorRequest;
  return proto.rpad.inspector.QuerySelectorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpad.inspector.QuerySelectorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpad.inspector.QuerySelectorRequest}
 */
proto.rpad.inspector.QuerySelectorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSelector(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpad.inspector.QuerySelectorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpad.inspector.QuerySelectorRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpad.inspector.QuerySelectorRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpad.inspector.QuerySelectorRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSelector();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string selector = 1;
 * @return {string}
 */
proto.rpad.inspector.QuerySelectorRequest.prototype.getSelector = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpad.inspector.QuerySelectorRequest} returns this
 */
proto.rpad.inspector.QuerySelectorRequest.prototype.setSelector = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpad.inspector.QuerySelectorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rpad.inspector.QuerySelectorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpad.inspector.QuerySelectorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpad.inspector.QuerySelectorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    element: (f = msg.getElement()) && proto.rpad.inspector.Element.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpad.inspector.QuerySelectorResponse}
 */
proto.rpad.inspector.QuerySelectorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpad.inspector.QuerySelectorResponse;
  return proto.rpad.inspector.QuerySelectorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpad.inspector.QuerySelectorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpad.inspector.QuerySelectorResponse}
 */
proto.rpad.inspector.QuerySelectorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rpad.inspector.Element;
      reader.readMessage(value,proto.rpad.inspector.Element.deserializeBinaryFromReader);
      msg.setElement(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpad.inspector.QuerySelectorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpad.inspector.QuerySelectorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpad.inspector.QuerySelectorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpad.inspector.QuerySelectorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getElement();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rpad.inspector.Element.serializeBinaryToWriter
    );
  }
};


/**
 * optional Element element = 1;
 * @return {?proto.rpad.inspector.Element}
 */
proto.rpad.inspector.QuerySelectorResponse.prototype.getElement = function() {
  return /** @type{?proto.rpad.inspector.Element} */ (
    jspb.Message.getWrapperField(this, proto.rpad.inspector.Element, 1));
};


/**
 * @param {?proto.rpad.inspector.Element|undefined} value
 * @return {!proto.rpad.inspector.QuerySelectorResponse} returns this
*/
proto.rpad.inspector.QuerySelectorResponse.prototype.setElement = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpad.inspector.QuerySelectorResponse} returns this
 */
proto.rpad.inspector.QuerySelectorResponse.prototype.clearElement = function() {
  return this.setElement(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpad.inspector.QuerySelectorResponse.prototype.hasElement = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.rpad.inspector);
